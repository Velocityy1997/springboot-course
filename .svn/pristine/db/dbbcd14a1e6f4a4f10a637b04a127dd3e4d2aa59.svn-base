package io.ken.springboot.course.controller;

import com.alibaba.fastjson.JSON;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import io.ken.springboot.course.bean.ClassDic;
import io.ken.springboot.course.bean.Exam;
import io.ken.springboot.course.bean.Log;
import io.ken.springboot.course.bean.User;
import io.ken.springboot.course.bean.UserLevelDic;
import io.ken.springboot.course.common.utils.ExcelUtils;
import io.ken.springboot.course.common.utils.MultipartFileToFile;
import io.ken.springboot.course.model.DataModel;
import io.ken.springboot.course.model.UserListModel;
import io.ken.springboot.course.service.IClassDicService;
import io.ken.springboot.course.service.ILogService;
import io.ken.springboot.course.service.IUserLevelDicService;
import io.ken.springboot.course.service.IUserService;
import io.ken.springboot.course.service.implement.ExamInfoServiceImpl;
import io.ken.springboot.course.tools.PhotoUtil;
import io.ken.springboot.course.tools.Result;
import io.ken.springboot.course.tools.Result3;
import io.ken.springboot.course.tools.TimeTools;
import io.swagger.annotations.ApiOperation;
import org.apache.commons.codec.digest.DigestUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.io.File;
import java.io.IOException;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

/**
 * ClassName: UserController
 * user:hwy
 *
 * @date 2019年11月14日
 */
@Controller
@RequestMapping("/user")
public class UserController {

    @Autowired
    private IUserService userService;

    @Autowired
    private IClassDicService classDicService;

    @Autowired
    private ILogService logService;

    @Autowired
    private IUserLevelDicService userLevelService;

    @Autowired
    private IUserLevelDicService userLevelDicService;

    @Autowired
    private ExamInfoServiceImpl examInfoServiceImpl;

    @RequestMapping("/getuserbyid")
    @ResponseBody
    public User queryById(String id) {
        User user = userService.getUserById(id);

        return user;
    }

    @RequestMapping("/getuserbyname")
    @ResponseBody
    public Result getUserByName(HttpServletRequest request) {
        Map<String, Object> map = new HashMap<String, Object>();
        User user1 = (User) request.getSession().getAttribute("loginInfo");// 取得当前登录用户
        User user = userService.getUserInfo(user1.getIdNumber());
        Result result = new Result<DataModel[]>();
        if (user != null) {
            List list = new ArrayList();

            DataModel dataModel = new DataModel();
            dataModel.setText("姓名");
            if(user.getName()==null){
                dataModel.setValue("");
            }else{
                dataModel.setValue(user.getName());
            }


            DataModel dataModel1 = new DataModel();
            dataModel1.setText("性别");
            if (user.getSex() == 0) {
                dataModel1.setValue("女性");
            } else if (user.getSex() == 1) {
                dataModel1.setValue("男性");
            }
            DataModel dataModel2 = new DataModel();
            dataModel2.setText("年龄");
            dataModel2.setValue("");
            if(user.getBirthday() != null && !(user.getBirthday().equals(""))) {
            	dataModel2.setValue(String.valueOf(TimeTools.getCurrentYear() - TimeTools.getDateTimeYear(user.getBirthday())));
            }
            
            DataModel dataModel3 = new DataModel();
            dataModel3.setText("班级");
            String classId = user.getClassId();
            String classname = classDicService.getClassNameById(classId);
            dataModel3.setValue(classname);
            if (classname == null) {
                dataModel3.setValue("无");
            }
            DataModel dataModel4 = new DataModel();
            dataModel4.setText("证件号");
            dataModel4.setValue(user.getIdNumber());
            List<Exam> list1 = examInfoServiceImpl.getCurrentExams1(user.getIdNumber());
            List<Exam> list2 = examInfoServiceImpl.getAlreadyExam(user.getIdNumber());
            DataModel dataModel5 = new DataModel();
            dataModel5.setText("已考");
            dataModel5.setValue(String.valueOf(list2.size()));

            DataModel dataModel6 = new DataModel();
            dataModel6.setText("待考");
            dataModel6.setValue(String.valueOf(list1.size()));

            map.put("adminImg", null);
            if (user.getPhoto() != null && !(user.getPhoto().equals(""))) {
                map.put("adminImg", PhotoUtil.sqlTophoto(user.getPhoto()));
            }
            if (user.getType() == 0) {
                map.put("admin", "true");
            } else {
                map.put("admin", "false");
            }
            list.add(dataModel);
            list.add(dataModel1);
            list.add(dataModel2);
            list.add(dataModel3);
            list.add(dataModel4);
            list.add(dataModel5);
            list.add(dataModel6);
            map.put("data", list);

            result.setCode(200);
            result.setMsg("msg");
            result.setData(map);
        } else {
            result.setCode(500);
            result.setMsg("error");
        }

        return result;
    }

    /**
     * 权限修改 lq
     *
     * @param request
     * @return
     */
    @RequestMapping("/privilege")
    @ResponseBody
    public Result getPrivilege(HttpServletRequest request) {

        Result result = new Result();
        String idNums = request.getParameter("idNumber");
        String typeName = request.getParameter("powerName");
        int type = 0;//0 为管理员 1 为学员
        int num = 0;
        String IdNumber[] = idNums.split(",");

        try {
            if (typeName.equals("学员")) {

                for (int i = 0; i < IdNumber.length; i++) {

                    String userId = IdNumber[i];
                    User user = userService.getUserInfo(userId);

                    String idNum = user.getIdNumber();
                    type = user.getType();
                    if (type == 0) {
                        user.setType(1);
                        num = userService.updateByType(user);
                    } else {
                        continue;
                    }
                }
            } else {
                for (int i = 0; i < IdNumber.length; i++) {

                    String userId = IdNumber[i];
                    User user = userService.getUserInfo(userId);

                    String idNum = user.getIdNumber();
                    type = user.getType();
                    if (type == 1) {
                        user.setType(0);
                        num = userService.updateByType(user);
                    } else {
                        continue;
                    }
                }
            }

            result.setCode(200);
            result.setData(null);
            result.setMsg("修改权限成功");
        } catch (Exception e) {
            // TODO: handle exception
            result.setCode(404);
            result.setData(null);
            result.setMsg("修改权限失败");
        }

        return result;
    }

    /**
     * 获取List
     *
     * @param limit
     * @param offset
     * @return
     * @author lq
     */
    @RequestMapping("/list")
    @ResponseBody
    public Result3 getUserList(int limit, int offset) {

        Result3 result3 = new Result3();
        PageHelper.startPage(offset, limit);
        int sex = 0;//性别（0：女，1：男）
        int type = 0;//类型（0：管理员，1：普通用户）
        List<User> userList = new ArrayList<User>();
        List<UserListModel> modelList = new ArrayList<UserListModel>();

        try {

            userList = userService.getAllUser();
            PageInfo<User> pageInfo = new PageInfo<User>(userList);
            for (int i = 0; i < userList.size(); i++) {
                UserListModel model = new UserListModel();
                String id = userList.get(i).getId();
                String photo = userList.get(i).getPhoto();
                String name = userList.get(i).getName();
                String level = userList.get(i).getLevelId();
                String levelName = userLevelDicService.getLevelName(level);
                sex = userList.get(i).getSex();
//                String age = String.valueOf(TimeTools.getCurrentYear() - TimeTools.getDateTimeYear(userList.get(i).getBirthday()));
                type = userList.get(i).getType();
    			/*if(type == 0) {
    				model.setClassName("无");
    				model.setCardId("");
				}else {

				}*/

                String classId = userList.get(i).getClassId();
                String className = classDicService.getClassNameById(classId);
                model.setClassName(className);
                model.setClassId(classId);

                String idNum = userList.get(i).getIdNumber();
                String information = userList.get(i).getTel();
                String birthday = String.valueOf(userList.get(i).getBirthday());

                String password = userList.get(i).getPassword();
                if (sex == 0) {
                    model.setSex("女");
                } else {
                    model.setSex("男");
                }

                if (type == 0) {
                    model.setJurisdiction("管理员");
                } else {
                    model.setJurisdiction("学员");
                }
//                model.setAge(Integer.valueOf(age));
                model.setCardId(idNum);

                model.setId(id);
                model.setName(name);
                model.setPassword("");
                model.setInformation(information);
                if (photo != null && !(photo.equals(""))) {
                    model.setUserImg(PhotoUtil.sqlTophoto(photo));
                }
                model.setLevelName(levelName);
                model.setBirthday(birthday);

                modelList.add(model);
            }

            result3.setCode(200);
            result3.setTotal(pageInfo.getTotal());
            result3.setRows(modelList);
            result3.setMsg("ok");
        } catch (Exception e) {
            // TODO: handle exception
            e.printStackTrace();
            result3.setCode(400);
            result3.setTotal(0L);
            result3.setRows(modelList);
            result3.setMsg("erro");
        }
        return result3;
    }

    /**
     * 用户添加
     *
     * @param
     * @return
     * @author lq
     */
    @RequestMapping("/Add")
    @ResponseBody
    public Result getAddUser(User user, String birthday1) {

        Result result = new Result();
        List<String> idList = new ArrayList<String>();
        try {
            String uuid = UUID.randomUUID().toString().replaceAll("-", "");

            String idNum = user.getIdNumber();
            idList = userService.getByIdNum(idNum);

            if (idList.size() > 0) {
                result.setCode(200);
                result.setData(false);
                result.setMsg("证件号已存在，请重新输入");
                return result;
            }
            String pdWord = "123456";
            String mdPd = DigestUtils.md5Hex(pdWord);
            user.setId(uuid);
            user.setPassword(mdPd);
            int num = userService.addUser(user);
            if (num > 0) {

                result.setCode(400);
                result.setData(false);
                result.setMsg("新增失败");
            } else {
                result.setCode(200);
                result.setData(true);
                result.setMsg("新增成功");
            }
        } catch (Exception e) {
            // TODO: handle exception
            result.setCode(400);
            result.setData(false);
            result.setMsg("新增失败");
        }

        return result;
    }

    /**
     * 批量删除
     *
     * @param id
     * @return
     * @author lq
     */
    @RequestMapping("/Delete")
    @ResponseBody
    public Result delUser(HttpServletRequest request, String id) {
        User user1 = (User) request.getSession().getAttribute("loginInfo");// 取得当前登录用户

        Result result = new Result();
        try {
            String ids[] = id.split(";");
            List<String> idList = new ArrayList<String>();
            for (int i = 0; i < ids.length; i++) {
                String userId = ids[i];
                if (userId.equals(user1.getId())) {
                    result.setData(false);
                    result.setMsg("当前登录用户不能删除");
                    return result;
                }
                idList.add(userId);
            }

            int num = userService.delUserByIds(idList);
            if (num > 0) {
                result.setData(true);
                result.setMsg("删除成功");
            } else {
                result.setData(false);
                result.setMsg("删除失败");
            }
        } catch (Exception e) {
            // TODO: handle exception
            e.printStackTrace();
            result.setData(false);
        }
        return result;
    }

    /**
     * 修改
     *
     * @param option
     * @return
     * @author lq
     */
    @RequestMapping("/Edit")
    @ResponseBody
    public Result getUpdate(HttpServletRequest request, User option) {

        Result result = new Result();
        User user = (User) request.getSession().getAttribute("loginInfo");// 取得当前登录用户
        try {
            User user1 = userService.getUserById(option.getId());
            option.setPassword(user1.getPassword());
            int num = userService.updateByUser(option);
            if (num > 0) {
                if (user.getId().equals(option.getId())) {
                    HttpSession session = request.getSession();
                    session.setAttribute("loginInfo", option);
                }
                result.setCode(200);
                result.setData(true);
                result.setMsg("修改成功");
            } else {
                result.setCode(500);
                result.setData(false);
                result.setMsg("修改失败");
            }
        } catch (Exception e) {
            // TODO: handle exception
            result.setCode(404);
            result.setData(false);
            result.setMsg("修改失败");
        }
        return result;
    }

    @RequestMapping("/Find")
    @ResponseBody
    public Result3 getFind(HttpServletRequest request) {

        //String limit = "1";
        //String offset = "10";
        Result3 result3 = new Result3();
        String name = request.getParameter("name");
        if (name.equals("")) {
            name = null;
        }
        String classId = request.getParameter("classId");
        if (classId.equals("")) {
            classId = null;
        }
        String levelId = request.getParameter("levelId");
        if (levelId.equals("")) {
            levelId = null;
        }
        String type = request.getParameter("type");
        if (type.equals("")) {
            type = null;
        }
        String limit = request.getParameter("limit");
        String offset = request.getParameter("offset");
        List<UserListModel> modelList = new ArrayList<UserListModel>();
        List<User> userList = new ArrayList<User>();
        int sex = 0;//性别（0：女，1：男）
        int privilege = 0;//类型（0：管理员，1：普通用户）
        try {

            PageHelper.startPage(Integer.valueOf(offset), Integer.valueOf(limit));
            userList = userService.getFindUser(name, classId, levelId, type);
            PageInfo<User> pageInfo = new PageInfo<User>(userList);
            for (int i = 0; i < userList.size(); i++) {

                UserListModel model = new UserListModel();
                String id = userList.get(i).getId();
                String photo = userList.get(i).getPhoto();
                String userName = userList.get(i).getName();
                String level = userList.get(i).getLevelId();
                String levelName = userLevelDicService.getLevelName(level);
                sex = userList.get(i).getSex();
                String age = String.valueOf(TimeTools.getCurrentYear() - TimeTools.getDateTimeYear(userList.get(i).getBirthday()));
                String classIds = userList.get(i).getClassId();
                String className = classDicService.getClassNameById(classIds);
                String idNum = userList.get(i).getIdNumber();
                String information = userList.get(i).getTel();
                String birthday = String.valueOf(userList.get(i).getBirthday());
                privilege = userList.get(i).getType();
                String password = userList.get(i).getPassword();
                if (sex == 0) {
                    model.setSex("女");
                } else {
                    model.setSex("男");
                }

                if (privilege == 0) {
                    model.setJurisdiction("管理员");
                } else {
                    model.setJurisdiction("学员");
                }
                model.setAge(Integer.valueOf(age));
                model.setCardId(idNum);
                model.setClassName(className);
                model.setId(id);
                model.setName(userName);
                model.setPassword(password);
                model.setInformation(information);
                if (photo != null && !(photo.equals(""))) {
                    model.setUserImg(PhotoUtil.sqlTophoto(photo));
                }
                model.setLevelName(levelName);
                model.setBirthday(birthday);
                model.setClassId(classIds);
                modelList.add(model);
            }

            result3.setCode(200);
            result3.setTotal(pageInfo.getTotal());
            result3.setRows(modelList);
            result3.setMsg("ok");
        } catch (Exception e) {
            // TODO: handle exception
            e.printStackTrace();
            e.printStackTrace();
            result3.setCode(400);
            result3.setTotal(0L);
            result3.setRows(modelList);
            result3.setMsg("erro");
        }

        return result3;
    }

    /**
     * 获取个人信息
     *
     * @param idNumber
     * @return
     */
    @RequestMapping("/userinfo")
    @ResponseBody
    public String getUserInfo(HttpServletRequest request) {
        User user1 = (User) request.getSession().getAttribute("loginInfo");// 取得当前登录用户
        Result result = new Result();
        User user = new User();
        String sex = null;
        Map<String, Object> map = new HashMap<String, Object>();
        try {

            user = userService.getUserInfo(user1.getIdNumber());

            String name = user.getName();
            if (name == null) {
            	name = "";
            }
            int sexNum = user.getSex();
            if (sexNum == 0) {
                sex = "女";
            } else {
                sex = "男";
            }
            String classId = user.getClassId();
            String className = classDicService.getClassNameById(classId);
            if (className == null) {
                className = "无";
            }
            String levelId = user.getLevelId();//级别id
            String levelName = userLevelDicService.getLevelName(levelId);
            String tel = user.getTel();
            String photo = user.getPhoto();
            if (photo != null && !(photo.equals(""))) {
                map.put("photo", PhotoUtil.sqlTophoto(photo));
            } else {
                map.put("photo", "");
            }
            map.put("name", name);
            map.put("sex", sex);
            map.put("levelId", levelName);
            map.put("classId", className);
            map.put("tel", tel);
            map.put("idNumber", user1.getIdNumber());
            String str = JSON.toJSONString(map);
            return str;
        } catch (Exception e) {
            // TODO: handle exception
            e.printStackTrace();
            map.put("name", "");
            map.put("sex", "");
            map.put("age", "");
            map.put("levelId", "");
            map.put("classId", "");
            map.put("tel", "");
            map.put("idNumber", user1.getIdNumber());
            map.put("photo", "");
            String str = JSON.toJSONString(map);
            return str;
        }
    }

    /**
     * 获取个人信息
     *
     * @param idNumber
     * @return
     */
    @RequestMapping("/userinfoname")
    @ResponseBody
    public Result getUserInfoName(HttpServletRequest request) {

        Map<String, Object> map = new HashMap<String, Object>();
        User user = (User) request.getSession().getAttribute("loginInfo");// 取得当前登录用户
        Result result = new Result<DataModel[]>();
        if (user != null) {
            map.put("name", user.getName());
            if (user.getType() == 0) {
                map.put("admin", "true");
            } else {
                map.put("admin", "false");
            }

            result.setCode(200);
            result.setMsg("msg");
            result.setData(map);
        } else {
            result.setCode(500);
            result.setMsg("error");
        }

        return result;
    }

    /**
     * 个人信息修改
     *
     * @param user
     * @return by:gyd
     */
    @RequestMapping("/updateinfo")
    @ResponseBody
    public Result updateInfo(HttpServletRequest request, User user) {

        Result result = new Result();
        String msg = "修改成功";
        try {
            HttpSession session = request.getSession();
            User curentUser = (User) session.getAttribute("loginInfo");
            String id = curentUser.getId();

            User oldUser = userService.getUserById(id);
            oldUser.setBirthday(user.getBirthday());
            oldUser.setName(user.getName());
            oldUser.setSex(user.getSex());
            oldUser.setBirthday(user.getBirthday());
            oldUser.setIdNumber(user.getIdNumber());
            oldUser.setClassId(user.getClassId());
            oldUser.setLevelId(user.getLevelId());
            oldUser.setPhoto(user.getPhoto());
            oldUser.setTel(user.getTel());
            
            int num = userService.updateByUser(oldUser);
            session.setAttribute("loginInfo", oldUser);
            result.setMsg(msg);
        } catch (Exception e) {
            // TODO: handle exception
            e.printStackTrace();
            result.setCode(500);
            result.setData(false);

            msg += "出现异常，请重试\n";

            result.setMsg(msg);
        }

        return result;
    }

    /**
     * 用户登录cll
     *
     * @param idNumber
     * @param passWord
     * @return
     */
    @RequestMapping("/login")
    @ResponseBody
    public Result login(HttpServletRequest request, String idNumber, String passWord) {

        Result result = new Result();
        Log log = new Log();
        DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Map map = new HashMap<String,String>();
        String date = sdf.format(new Date());
        String passWord1 = DigestUtils.md5Hex(passWord);
        User user = userService.getUserInfo(idNumber);
        if(user == null && idNumber.equals(passWord)) {//新用户
        	User newuser = new User();
        	newuser.setIdNumber(idNumber);
        	String uuid = UUID.randomUUID().toString().replaceAll("-", "");
        	newuser.setId(uuid);
        	newuser.setType(1);
        	newuser.setPassword(passWord1);
        	HttpSession session = request.getSession();
            session.setAttribute("loginInfo", newuser);
            userService.addUser(newuser);
            String uuidlog = UUID.randomUUID().toString().replaceAll("-", "");
            Timestamp ts = Timestamp.valueOf(date);
            log.setId(uuidlog);
            log.setId_number(idNumber);
            log.setType(1);
            log.setTime(ts);
            log.setName(idNumber);
            int num = logService.insertModel(log);//将登陆操作插入到log表中
            result.setCode(200);
            map.put("newuser", "1");
            result.setData(map);
            result.setMsg("登录成功");
        }
        else if(user != null) {
        	List<User> userList = userService.findUserByIdNumAndPassword(idNumber, passWord1);
            String adminType = null;
            if (userList.size() > 0 && passWord1.equals(userList.get(0).getPassword())) {
                HttpSession session = request.getSession();
                session.setAttribute("loginInfo", userList.get(0));
                String useName = userList.get(0).getName();
                String uuid = UUID.randomUUID().toString().replaceAll("-", "");
                Timestamp ts = Timestamp.valueOf(date);
                log.setId(uuid);
                log.setId_number(idNumber);
                log.setType(1);
                log.setTime(ts);
                log.setName(useName);
                int num = logService.insertModel(log);//将登陆操作插入到log表中
                result.setCode(200);
                result.setMsg("登录成功");
                map.put("newuser", "0");
                result.setData(map);
            } else {
                result.setCode(500);
                result.setMsg("证件号或密码错误，请重新输入");
            }
        }
        else {
        	result.setCode(500);
            result.setMsg("证件号或密码错误，请重新输入");
        }
        return result;
    }

    /**
     * 用户退出
     *
     * @param idNumber
     * @param passWord
     * @return
     */
    @RequestMapping("/logOut")
    @ResponseBody
    public Result logOut(HttpServletRequest request) {

        Result result = new Result();
        Map<String, Object> map = new HashMap<String, Object>();
        HttpSession session = request.getSession();
        session.removeAttribute("loginInfo");
        result.setCode(200);
        result.setMsg("退出成功");
        result.setData(map);

        return result;
    }

    /**
     * 重置密码
     *
     * @param idNumber
     * @return
     */
    @RequestMapping("/resetPd")
    @ResponseBody
    public Result resetPd(String idNumber) {

        Result result = new Result();
        String pdWord = "123456";
        String mdPd = DigestUtils.md5Hex(pdWord);

        int num = userService.resetPd(mdPd, idNumber);
        if (num > 0) {
            result.setCode(200);
            result.setMsg("重置密码成功");
        } else {
            result.setCode(500);
            result.setMsg("重置密码失败");
        }

        return result;
    }

    /**
     * @param newPd
     * @param oldPd
     * @param idNumber
     * @return
     */
    @RequestMapping("/changePd")
    @ResponseBody
    public Result changePd(String newPd, String oldPd, HttpServletRequest request) {

        Result result = new Result();
        User user = (User) request.getSession().getAttribute("loginInfo");// 取得当前登录用户
        String oldMd = DigestUtils.md5Hex(oldPd);
        String idNumber = user.getIdNumber();
        String newPdMd = DigestUtils.md5Hex(newPd);
        String pdMd5 = user.getPassword();
        if (pdMd5.equals(oldMd)) {
            int num = userService.changePd(newPdMd, idNumber);
            if (num > 0) {
                result.setCode(200);
                result.setMsg("修改密码成功");
            } else {
                result.setCode(500);
                result.setMsg("修改密码失败");
            }
        } else {
            result.setCode(500);
            result.setMsg("原始密码错误，请重新输入正确密码");
        }

        return result;
    }
    @ApiOperation(value = "人员录入",notes = "人员录入")
    @PostMapping("/addUserExcel")
    @ResponseBody
    public Map<String, Object> addUserExcel(@RequestParam(value = "file") MultipartFile userExcel) {
        Map<String, Object> map = new HashMap<String, Object>();
        Map<String, String> errorUser = new HashMap<String, String>();//存放错用户错误信息
        Set<String> errorLevel = new HashSet<String>();//不存在的级别
        Set<String> errorClass=new HashSet<String>();//不存在的班级
        List<User> userList = new ArrayList<User>();//存放正确的名单
        File file = null;
        if (userExcel.isEmpty() || userExcel.getSize() == 0) {
            map.put("msg", "上传失败");
            map.put("code", 500);
            return map;
        } else {
            try {
                file= MultipartFileToFile.multipartFileToFile(userExcel);//转为file
            } catch (IOException e) {
                map.put("msg", "添加失败");
                map.put("code", 400);
                return map;
            }
            try {
                List<Map> mapList = ExcelUtils.getImport(file);
                MultipartFileToFile.deleteFile();//删除转换文件时产生的临时文件
                List<UserLevelDic> levelList = userLevelDicService.getList();//获取军团级别
                List<ClassDic> classDicList=classDicService.getNameList();//获取班级信息
                String key = null;
                String value = null;
                boolean right = true;//用户信息是否正确
                for (Map mapUser : mapList) {
                    String error = new String();//用户的异常信息
                    User user = new User();
                    Iterator<Map.Entry<String, String>> iterator = mapUser.entrySet().iterator();
                    while (iterator.hasNext()) {
                        Map.Entry<String, String> entry = iterator.next();
                        key = entry.getKey();
                        value = entry.getValue();
                        if (key.equals("姓名")) {
                            user.setName(value);
                        } else if (key.equals("性别")) {
                            if (value.equals("男")) {
                                user.setSex(1);
                            } else {
                                user.setSex(0);
                            }
                        }
                        else if (key.equals("单位")) {
                                for (ClassDic classDic:classDicList){
                                    if(classDic.getClassName().equals(value)){
                                        user.setClassId(classDic.getClassId());
                                    }
                                }
                            if(user.getClassId()==null || user.getClassId().equals("")){
                                errorClass.add(value);
                                right=false;
                            }
                        } else if (key.equals("级别")) {
                            for (UserLevelDic userLevelDic : levelList) {
                                if (userLevelDic.getLevelId()==Integer.parseInt(value)) {
                                    user.setLevelId(String.valueOf(userLevelDic.getLevelId()));
                                }
                            }
                            if (user.getLevelId() == null || user.getLevelId().equals("")) {
                                errorLevel.add(value);
                                right = false;
                            }
                        } else if (key.equals("证件号")) {
                            List<String> idList = userService.getByIdNum(value);
                            if (idList.size() > 0) {
                                if (error!=null||error.length()>0) {
                                    error += "、";
                                }
                                error = "证件号重复";
                                right = false;
                                continue;
                            }
                            user.setIdNumber(value);
                        } else if (key.equals("权限")) {
                            if (value.equals("管理员")) {
                                user.setType(0);
                            } else {
                                user.setType(1);
                            }
                        }
                    }
                    if (right == true) {
                        String uuid = UUID.randomUUID().toString().replaceAll("-", "");
                        user.setId(uuid);
                        String pdWord = "123456";
                        String mdPd = DigestUtils.md5Hex(pdWord);
                        user.setPassword(mdPd);
                        userList.add(user);
                    } else {
                        errorUser.put(user.getName(), error);
                    }
                }
            }catch (NumberFormatException e){
                map.put("msg","添加失败");
                map.put("code",400);
                return map;
            }
        }
        try {
            int num= userService.addUserExcel(userList);
        }catch (Exception e){
        }

        if(errorUser.size()>0||errorLevel.size()>0){
            map.put("msg","以下信息有误");
            map.put("user",errorUser);
            map.put("level",errorLevel);
            map.put("class",errorClass);
            map.put("code",200);
        }else {
            map.put("mag","录入成功");
            map.put("code",200);
        }
        return map;
    }
}
