package io.ken.springboot.course.controller.exam;

import com.alibaba.fastjson.JSON;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import io.ken.springboot.course.bean.ChooseSelectStore;
import io.ken.springboot.course.bean.ClassDic;
import io.ken.springboot.course.bean.DecideStore;
import io.ken.springboot.course.bean.Exam;
import io.ken.springboot.course.bean.FillBlankExamStore;
import io.ken.springboot.course.bean.HandExamStore;
import io.ken.springboot.course.model.CommModel;
import io.ken.springboot.course.model.NewExam;
import io.ken.springboot.course.model.TreeClass;
import io.ken.springboot.course.model.TreeClassModel;
import io.ken.springboot.course.model.exam.newExam.CreatNewExam;
import io.ken.springboot.course.service.IChooseSelectStoreService;
import io.ken.springboot.course.service.IClassDicService;
import io.ken.springboot.course.service.IDecideStoreService;
import io.ken.springboot.course.service.IExamService;
import io.ken.springboot.course.service.IFillExamService;
import io.ken.springboot.course.service.IQuestionTypeService;
import io.ken.springboot.course.tools.PageUtil;
import io.ken.springboot.course.tools.PhotoUtil;
import io.ken.springboot.course.tools.Result;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

/**
 * 出题
 *
 * @author NewExamController.java
 * 2019年11月21日
 */
@Controller
@RequestMapping("/newexam")
public class NewExamController {

    @Autowired
    private IExamService examService;

    @Autowired
    private IQuestionTypeService questionTypeService;

    @Autowired
    private IClassDicService classDicService;

    @Autowired
    private IChooseSelectStoreService iChooseSelectStoreService;

    @Autowired
    private IFillExamService iFillExamService;

    @Autowired
    private IDecideStoreService iDecideStoreService;

    @Autowired
    private IExamService iExamService;

    /**
     * @param type     = 1(开机设置查询hand_exam_store表)
     *                 type=2 （本机信息查询 查询fill_blank_exam_store）
     *                 type =3 (定位 查询hand_exam_store表 和 fill_blank_exam_store表)
     *                 tyep = 4 (短报文通信 查询comm_exam_store)
     * @param limit条数
     * @param offset页数
     * @return
     */
    @RequestMapping("/getneweam")
    @ResponseBody
    public Map<String, Object> getNewExam(String type, int limit, int offset, String subject, String level, String category) {
        //type 是填空或选择
        PageHelper.startPage(offset, limit);
        List<HandExamStore> handList = new ArrayList<HandExamStore>();
        List<ChooseSelectStore> selectList = new ArrayList<ChooseSelectStore>();
        List<DecideStore> decideList = new ArrayList<DecideStore>();
        List<CommModel> modelList = new ArrayList<CommModel>();
        List<NewExam> newExamList = new ArrayList<NewExam>();
        Map<String, Object> map = new HashMap<String, Object>();
        int cate = 0;
        if (!(category.equals("全部"))) {
            cate = questionTypeService.getTypeIdBySAndT(subject, category);
        }
        try {

            if (type.equals("1")) {    //操作题
                PageHelper.startPage(offset, limit);
                if ((category.equals("全部"))) {
                    handList = examService.getHandList(subject, level);
                } else {
                    handList = examService.getHandList1(subject, cate, level);
                }
                PageInfo<HandExamStore> pageInfo = new PageInfo<HandExamStore>(handList);
                for (int i = 0; i < handList.size(); i++) {
                    String id = handList.get(i).getId();
                    String questionName = handList.get(i).getQuestionName();
                    String questionCode = handList.get(i).getQuestionCode();
                    int typer = handList.get(i).getType();
                    String grade = handList.get(i).getGrade();
                    CommModel model = new CommModel();
                    model.setId(id);
                    model.setGrade(grade);
                    model.setQuestionName(questionName);
                    model.setQuestionCode(questionCode);
                    model.setType(typer);
                    model.setTypeQ("操作题");
                    modelList.add(model);
                }

                map.put("rows", modelList);
                map.put("total", pageInfo.getTotal());
            } else if (type.equals("2")) {//填空题
                PageHelper.startPage(offset, limit);
                if ((category.equals("全部"))) {
                    if ((subject.equals("1"))) {
                        newExamList = examService.getHF(subject, level);//联合查询通信题和填空题
                    } else {
                        newExamList = examService.getFill(subject, level);//查询填空题
                    }
                } else {

                    newExamList = examService.getHF1(subject, cate, level);//查询填空题
                }

                PageInfo<NewExam> pageInfo = new PageInfo<NewExam>(newExamList);
                for (int i = 0; i < newExamList.size(); i++) {

                    CommModel model = new CommModel();
                    String id = newExamList.get(i).getId();
                    String questionName = newExamList.get(i).getQuestionName();
                    String questionCode = newExamList.get(i).getQuestionCode();
                    int typer = newExamList.get(i).getType();
                    String grade = newExamList.get(i).getGrade();
                    model.setId(id);
                    model.setGrade(grade);
                    model.setQuestionName(questionName);
                    model.setQuestionCode(questionCode);
                    model.setType(typer);
                    model.setGrade(grade);
                    model.setPicturePath(newExamList.get(i).getPicturePath());
                    if (newExamList.get(i).getPassTableId() != null) {
                        model.setImg(PhotoUtil.sqlTophoto(newExamList.get(i).getPassTableId()));
                    }
                    String typeQ = newExamList.get(i).getTypeQ();
                    if (typeQ.equals("comm")) {
                        model.setTypeQ("通信题");
                    } else {
                        model.setTypeQ("填空题");
                    }
                    modelList.add(model);
                }
                map.put("rows", modelList);
                map.put("total", pageInfo.getTotal());
            } else if (type.equals("3")) {//选择题
                PageHelper.startPage(offset, limit);
                if ((category.equals("全部"))) {
                    selectList = examService.getSelect(subject, level);
                } else {
                    selectList = examService.getSelect1(subject, cate, level);
                }

                PageInfo<ChooseSelectStore> pageInfo = new PageInfo<ChooseSelectStore>(selectList);
                for (int i = 0; i < selectList.size(); i++) {

                    CommModel model = new CommModel();
                    String id = selectList.get(i).getId();
                    String questionName = selectList.get(i).getQuestionName();
                    String questionCode = selectList.get(i).getQuestionCode();
                    int typer = selectList.get(i).getType();
                    String grade = selectList.get(i).getGrade();
                    model.setId(id);
                    model.setGrade(grade);
                    model.setQuestionName(questionName);
                    model.setQuestionCode(questionCode);
                    model.setType(typer);
                    model.setGrade(grade);
                    model.setPicturePath(selectList.get(i).getPicturePath());
                    if (selectList.get(i).getPassTableId() != null) {
                        model.setImg(PhotoUtil.sqlTophoto(selectList.get(i).getPassTableId()));
                    }
                    model.setSelect(selectList.get(i).getSelectA());
                    model.setTypeQ("选择题");
                    modelList.add(model);
                }
                map.put("rows", modelList);
                map.put("total", pageInfo.getTotal());
            } else if (type.equals("4")) {//判断题
                PageHelper.startPage(offset, limit);
                if ((category.equals("全部"))) {
                    decideList = examService.getDecide(subject, level);
                } else {
                    decideList = examService.getDecide1(subject, cate, level);
                }

                PageInfo<DecideStore> pageInfo = new PageInfo<DecideStore>(decideList);
                for (int i = 0; i < decideList.size(); i++) {
                    CommModel model = new CommModel();
                    String id = decideList.get(i).getId();
                    String questionName = decideList.get(i).getQuestionName();
                    String questionCode = decideList.get(i).getQuestionCode();
                    int typer = decideList.get(i).getType();
                    String grade = decideList.get(i).getGrade();
                    model.setId(id);
                    model.setQuestionName(questionName);
                    model.setQuestionCode(questionCode);
                    model.setType(typer);
                    model.setGrade(grade);
                    model.setPicturePath(decideList.get(i).getPicturePath());
                    if (decideList.get(i).getPassTableId() != null) {
                        model.setImg(PhotoUtil.sqlTophoto(decideList.get(i).getPassTableId()));
                    }
                    model.setSelect(decideList.get(i).getSelectA());
                    model.setTypeQ("判断题");
                    modelList.add(model);
                }
                map.put("rows", modelList);
                map.put("total", pageInfo.getTotal());
            } else {
                if ((category.equals("全部"))) {
                    handList = examService.getHandList(subject, level);
                } else {
                    handList = examService.getHandList1(subject, cate, level);
                }
                for (int i = 0; i < handList.size(); i++) {
                    String id = handList.get(i).getId();
                    String questionName = handList.get(i).getQuestionName();
                    String questionCode = handList.get(i).getQuestionCode();
                    int typer = handList.get(i).getType();
                    String grade = handList.get(i).getGrade();
                    CommModel model = new CommModel();
                    model.setId(id);
                    model.setGrade(grade);
                    model.setQuestionName(questionName);
                    model.setQuestionCode(questionCode);
                    model.setType(typer);
                    model.setTypeQ("操作题");
                    modelList.add(model);
                }
                if ((category.equals("全部"))) {
                    if ((subject.equals("1"))) {
                        newExamList = examService.getHF(subject, level);//联合查询通信题和填空题
                    } else {
                        newExamList = examService.getFill(subject, level);//查询填空题
                    }
                } else {
                    newExamList = examService.getHF1(subject, cate, level);//查询填空题
                }

                for (int i = 0; i < newExamList.size(); i++) {

                    CommModel model = new CommModel();
                    String id = newExamList.get(i).getId();
                    String questionName = newExamList.get(i).getQuestionName();
                    String questionCode = newExamList.get(i).getQuestionCode();
                    int typer = newExamList.get(i).getType();
                    String grade = newExamList.get(i).getGrade();
                    model.setId(id);
                    model.setGrade(grade);
                    model.setQuestionName(questionName);
                    model.setQuestionCode(questionCode);
                    model.setType(typer);
                    model.setGrade(grade);
                    model.setPicturePath(newExamList.get(i).getPicturePath());
                    if (newExamList.get(i).getPassTableId() != null) {
                        model.setImg(PhotoUtil.sqlTophoto(newExamList.get(i).getPassTableId()));
                    }
                    String typeQ = newExamList.get(i).getTypeQ();
                    if (typeQ.equals("comm")) {
                        model.setTypeQ("通信题");
                    } else {
                        model.setTypeQ("填空题");
                    }
                    modelList.add(model);
                }
                if ((category.equals("全部"))) {
                    selectList = examService.getSelect(subject, level);
                } else {
                    selectList = examService.getSelect1(subject, cate, level);
                }

                for (int i = 0; i < selectList.size(); i++) {

                    CommModel model = new CommModel();
                    String id = selectList.get(i).getId();
                    String questionName = selectList.get(i).getQuestionName();
                    String questionCode = selectList.get(i).getQuestionCode();
                    int typer = selectList.get(i).getType();
                    String grade = selectList.get(i).getGrade();
                    model.setId(id);
                    model.setGrade(grade);
                    model.setQuestionName(questionName);
                    model.setQuestionCode(questionCode);
                    model.setType(typer);
                    model.setGrade(grade);
                    model.setPicturePath(selectList.get(i).getPicturePath());
                    if (selectList.get(i).getPassTableId() != null) {
                        model.setImg(PhotoUtil.sqlTophoto(selectList.get(i).getPassTableId()));
                    }
                    model.setSelect(selectList.get(i).getSelectA());
                    model.setTypeQ("选择题");
                    modelList.add(model);
                }
                if ((category.equals("全部"))) {
                    decideList = examService.getDecide(subject, level);
                } else {
                    decideList = examService.getDecide1(subject, cate, level);
                }

                for (int i = 0; i < decideList.size(); i++) {
                    CommModel model = new CommModel();
                    String id = decideList.get(i).getId();
                    String questionName = decideList.get(i).getQuestionName();
                    String questionCode = decideList.get(i).getQuestionCode();
                    int typer = decideList.get(i).getType();
                    String grade = decideList.get(i).getGrade();
                    model.setId(id);
                    model.setQuestionName(questionName);
                    model.setQuestionCode(questionCode);
                    model.setType(typer);
                    model.setGrade(grade);
                    model.setPicturePath(decideList.get(i).getPicturePath());
                    if (decideList.get(i).getPassTableId() != null) {
                        model.setImg(PhotoUtil.sqlTophoto(decideList.get(i).getPassTableId()));
                    }
                    model.setSelect(decideList.get(i).getSelectA());
                    model.setTypeQ("判断题");
                    modelList.add(model);
                }
                List<CommModel> modelList1 = new ArrayList<CommModel>();
                modelList1 = PageUtil.startPage(modelList, limit, offset);
                map.put("rows", modelList1);
                map.put("total", modelList.size());
            }
        } catch (Exception e) {
            // TODO: handle exception
            e.printStackTrace();
            map.put("rows", null);
            map.put("total", 0);
        }
        return map;
    }

    /**
     * 获取班级及班级下所属学生
     *
     * @return
     */
    @RequestMapping(value = "/getclassandstu", method = RequestMethod.POST)
    @ResponseBody
    public List<TreeClassModel> getClassAndStu(String level) {

        List<TreeClass> treeList = new ArrayList<TreeClass>();
        List<ClassDic> nameList = new ArrayList<ClassDic>();
        List<TreeClassModel> modelList1 = new ArrayList<TreeClassModel>();

        String className = null;//班级名
        String stuClass = null;// 学生所属班级
        String classId = null;//班级ID

        try {
            nameList = classDicService.getNameList();
            treeList = examService.getTreeList(level);
            TreeClassModel t1 = new TreeClassModel();
            for (int i = 0; i < nameList.size(); i++) {
                List<TreeClassModel> modelList3 = new ArrayList<TreeClassModel>();
                t1 = new TreeClassModel();
                className = nameList.get(i).getClassName();
                classId = nameList.get(i).getClassId();
                for (int j = 0; j < treeList.size(); j++) {
                    TreeClassModel t2 = new TreeClassModel();
                    stuClass = treeList.get(j).getClassName();
                    String[] model = null;
                    if (className.equals(stuClass)) {
                        String idNum = treeList.get(j).getIdNumber();
                        String name = treeList.get(j).getName();
                        t2.setChildren(new ArrayList<Object>());
                        t2.setExpanded("false");
                        t2.setId(idNum);
                        t2.setType("2");
                        t2.setTitle(name);
                        t2.setName(name);
                        modelList3.add(t2);
                    }
                }

                t1.setChildren(modelList3);
                t1.setExpanded("false");
                t1.setId(classId);
                t1.setType("1");
                t1.setTitle(className);
                t1.setName(className);
                modelList1.add(t1);
            }
        } catch (Exception e) {
            // TODO: handle exception
            e.printStackTrace();
            TreeClassModel t1 = new TreeClassModel();
            t1.setChildren(modelList1);
            t1.setExpanded("false");
            t1.setId(classId);
            t1.setType("1");
            t1.setTitle(className);
            t1.setName(className);
            modelList1.add(t1);
        }

        return modelList1;
    }

    @ApiOperation(value = "生成新试卷", notes = "新试卷")
    @RequestMapping(value = "/createNewExam")
    @ResponseBody
    public Result createNewExam(@RequestParam("hand") String hand) {
        Result result = new Result();
        System.out.println("\n" + hand + "\n");
        CreatNewExam creatNewExam = JSON.parseObject(hand, CreatNewExam.class);
        boolean tag = iExamService.checkExamName(creatNewExam.getTestName());
        if (tag) {
            //名称存在
            result.setMsg("考试名称已存在");
            result.setCode(500);
            result.setSuccess(true);
            return result;
        }
        //存放试题code
        List<String> chooseCode = new ArrayList<String>();
        List<String> decideCode = new ArrayList<String>();
        List<String> fillBlankCode = new ArrayList<String>();
        //存放试题答案
        List<String> chooseResult = new ArrayList<String>();
        List<String> decideResult = new ArrayList<String>();
        List<String> fillBlankResult = new ArrayList<String>();
        //取题
        List<ChooseSelectStore> chooseSelectStoreListR = new ArrayList<ChooseSelectStore>();//单选题
        List<ChooseSelectStore> chooseSelectStoreListC = new ArrayList<ChooseSelectStore>();//多选
        List<DecideStore> decideStoreList = new ArrayList<DecideStore>();//判断
        List<FillBlankExamStore> fillBlankExamStoreList = new ArrayList<FillBlankExamStore>();//填空
        try {

            if (creatNewExam.getRadio() != 0) {
                creatNewExam.setFlag("0");
                chooseSelectStoreListR = iChooseSelectStoreService.getQuestion(creatNewExam);
                for (ChooseSelectStore chooseSelectStore : chooseSelectStoreListR) {
                    chooseCode.add(chooseSelectStore.getQuestionCode());
                    chooseResult.add(chooseSelectStore.getResult());
                }
            }
            if (creatNewExam.getCheckbox() != 0) {
                creatNewExam.setFlag("1");
                chooseSelectStoreListC = iChooseSelectStoreService.getQuestion(creatNewExam);
                for (ChooseSelectStore chooseSelectStore : chooseSelectStoreListC) {
                    chooseCode.add(chooseSelectStore.getQuestionCode());
                    chooseResult.add(chooseSelectStore.getResult());
                }
            }
            if (creatNewExam.getJudge() != 0) {
                decideStoreList = iDecideStoreService.getQuestion(creatNewExam);
                for (DecideStore decideStore : decideStoreList) {
                    decideCode.add(decideStore.getQuestionCode());
                    decideResult.add(decideStore.getResult());
                }
            }
            if (creatNewExam.getPack() != 0) {
                fillBlankExamStoreList = iFillExamService.getQuestion(creatNewExam);
                for (DecideStore decideStore : decideStoreList) {
                    fillBlankCode.add(decideStore.getQuestionCode());
                    fillBlankResult.add(decideStore.getResult());
                }
            }

            String chooseCodes = String.join(";", chooseCode);
            String chooseResults = String.join(";", chooseResult);
            String decideCodes = String.join(";", decideCode);
            String decideResults = String.join(";", decideResult);
            String fillBlankCodes = String.join(";", fillBlankCode);
            String fillBlankResults = String.join(";", fillBlankResult);

            //创建试卷
            String[] idNumber = creatNewExam.getIdNumber().split(",");
            List<Exam> examList = new ArrayList<Exam>();//存放试卷
            String uuid = "";
            Exam exam = null;
            for (String id : idNumber) {
                exam = new Exam();
                uuid = UUID.randomUUID().toString().replaceAll("-", "");
                exam.setExamId(uuid);
                exam.setType(Integer.parseInt(creatNewExam.getSubject()));
                exam.setStartTime(Timestamp.valueOf(creatNewExam.getStartTime()));
                exam.setStatus(0);
                exam.setExamName(creatNewExam.getTestName());
                exam.setQuestionNum(creatNewExam.getQuestionNum());
                exam.setTotalGrade(creatNewExam.getTotalGrade());
                exam.setDuration(creatNewExam.getDuration());
                exam.setQuestionGrade(creatNewExam.getQuestionGrade());
                exam.setCreateExam(0);
                exam.setIdNumber(creatNewExam.getIdNumber());

                exam.setChooseExamResult(chooseResults);
                exam.setChooseExamQuestion(chooseCodes);

                exam.setDecideExamResult(decideResults);
                exam.setDecideExamQuestion(decideCodes);

                exam.setFillBlankExamResult(fillBlankResults);
                exam.setFillBlankExamQuestion(fillBlankCodes);
                examList.add(exam);
            }

            int num = examService.addExam(examList);
            result.setMsg("添加成功");
            result.setCode(200);
        } catch (Exception e) {
            result.setMsg("添加失败");
            result.setCode(400);
        }
        return result;
    }

    @ApiOperation(value = "题数统计", notes = "题数统计")
    @RequestMapping(value = "/countExam")
    @ResponseBody
    public Map<String, Object> countExam(String subject, String level) {
        Map<String, Integer> map = new HashMap<String, Integer>();
        Map<String, Object> map1 = new HashMap<String, Object>();
        try {
            int radio = iChooseSelectStoreService.getCount(subject, 0, level);//选择单选
            int checkbox = iChooseSelectStoreService.getCount(subject, 1, level);//选择多选
            int pack = iFillExamService.getCount(subject, level);
            int judge = iDecideStoreService.getCount(subject, level);
            map.put("radio", radio);
            map.put("checkbox", checkbox);
            map.put("pack", pack);
            map.put("judge", judge);
            map1.put("code", 200);
            map1.put("data", map);
        } catch (Exception e) {
            map1.put("code", 400);
            map1.put("data", "查询失败");
        }
        return map1;
    }
}
