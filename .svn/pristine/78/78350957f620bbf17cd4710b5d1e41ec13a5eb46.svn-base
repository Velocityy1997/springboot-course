package io.ken.springboot.course.controller.exam;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;

import io.ken.springboot.course.bean.ChooseSelectStore;
import io.ken.springboot.course.bean.ClassDic;
import io.ken.springboot.course.bean.DecideStore;
import io.ken.springboot.course.bean.HandExamStore;
import io.ken.springboot.course.model.CommModel;
import io.ken.springboot.course.model.NewExam;
import io.ken.springboot.course.model.TreeClass;
import io.ken.springboot.course.model.TreeClassModel;
import io.ken.springboot.course.service.IClassDicService;
import io.ken.springboot.course.service.IExamService;
import io.ken.springboot.course.service.IQuestionTypeService;
import io.ken.springboot.course.tools.PageUtil;
import io.ken.springboot.course.tools.PhotoUtil;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * 	出题
 * @author 
 *NewExamController.java
 * 2019年11月21日
 */
@Controller
@RequestMapping("/newexam")
public class NewExamController {
	
	@Autowired
	private IExamService examService;
	
	@Autowired
	private IQuestionTypeService questionTypeService;
		
	@Autowired
	private IClassDicService classDicService;
	
	
	/**
	 * 
	 * @param type = 1(开机设置查询hand_exam_store表) 
	 * type=2 （本机信息查询 查询fill_blank_exam_store）
	 * type =3 (定位 查询hand_exam_store表 和 fill_blank_exam_store表)
	 * tyep = 4 (短报文通信 查询comm_exam_store)
	 * @param limit条数
	 * @param offset页数
	 * @return
	 */
	@RequestMapping("/getneweam")
	@ResponseBody
	public  Map<String, Object> getNewExam(String type,int limit, int offset,String subject,String level,String category){
		//type 是填空或选择   
		PageHelper.startPage(offset, limit);
		List<HandExamStore> handList = new ArrayList<HandExamStore>();
		List<ChooseSelectStore> selectList = new ArrayList<ChooseSelectStore>();
		List<DecideStore> decideList = new ArrayList<DecideStore>();
		List<CommModel> modelList = new ArrayList<CommModel>();
		List<NewExam> newExamList = new ArrayList<NewExam>();
		Map<String, Object> map = new HashMap<String, Object>();
		int cate = 0;
		if(!(category.equals("全部"))) {
			cate = questionTypeService.getTypeIdBySAndT(subject, category);
		}
		try {
			
			if(type.equals("1")) {	//操作题	
				PageHelper.startPage(offset, limit);
				if((category.equals("全部"))) {
					handList = examService.getHandList(subject,level);
				}
				else {
					handList = examService.getHandList1(subject,cate,level);
				}
				PageInfo<HandExamStore> pageInfo  =new PageInfo<HandExamStore>(handList);
				for (int i = 0; i < handList.size(); i++) {
					String id  = handList.get(i).getId();
					String questionName = handList.get(i).getQuestionName();
					String questionCode = handList.get(i).getQuestionCode();
					int typer = handList.get(i).getType();
					String grade = handList.get(i).getGrade();
					CommModel model = new CommModel();
					model.setId(id);
					model.setGrade(grade);
					model.setQuestionName(questionName);
					model.setQuestionCode(questionCode);
					model.setType(typer);
					model.setTypeQ("操作题");
					modelList.add(model);
				}
				
				map.put("rows", modelList);
				map.put("total", pageInfo.getTotal());
			}
			
			else if (type.equals("2")) {//填空题
				PageHelper.startPage(offset, limit);
				if((category.equals("全部"))) {
					if((subject.equals("1"))) {
						newExamList = examService.getHF(subject,level);//联合查询通信题和填空题
					}
					else {
						newExamList = examService.getFill(subject,level);//查询填空题
					}
				}
				else {
					
						newExamList = examService.getHF1(subject,cate, level);//查询填空题					
					
				}
				
				PageInfo<NewExam> pageInfo  =new PageInfo<NewExam>(newExamList);
				for (int i = 0; i < newExamList.size(); i++) {
					
					CommModel model = new CommModel();
					String id = newExamList.get(i).getId();
					String questionName = newExamList.get(i).getQuestionName();
					String questionCode = newExamList.get(i).getQuestionCode();
					int typer = newExamList.get(i).getType();
					String grade = newExamList.get(i).getGrade();
					model.setId(id);
					model.setGrade(grade);
					model.setQuestionName(questionName);
					model.setQuestionCode(questionCode);
					model.setType(typer);
					model.setGrade(grade);
					model.setPicturePath(newExamList.get(i).getPicturePath());
					if(newExamList.get(i).getPassTableId() != null) {
						model.setImg(PhotoUtil.sqlTophoto(newExamList.get(i).getPassTableId()));
					}
					String typeQ = newExamList.get(i).getTypeQ();
					if(typeQ.equals("comm")) {
						model.setTypeQ("通信题");
					}else {
						model.setTypeQ("填空题");
					}
					modelList.add(model);
				}
				map.put("rows", modelList);
				map.put("total", pageInfo.getTotal());
				
			}
			
			else if(type.equals("3")) {//选择题
				PageHelper.startPage(offset, limit);
				if((category.equals("全部"))) {
					selectList = examService.getSelect(subject, level);
				}
				else {
					selectList = examService.getSelect1(subject,cate, level);
				}
				
				PageInfo<ChooseSelectStore> pageInfo  =new PageInfo<ChooseSelectStore>(selectList);
				for (int i = 0; i < selectList.size(); i++) {
					
					CommModel model = new CommModel();
					String id = selectList.get(i).getId();
					String questionName = selectList.get(i).getQuestionName();
					String questionCode = selectList.get(i).getQuestionCode();
					int typer = selectList.get(i).getType();
					String grade = selectList.get(i).getGrade();
					model.setId(id);
					model.setGrade(grade);
					model.setQuestionName(questionName);
					model.setQuestionCode(questionCode);
					model.setType(typer);
					model.setGrade(grade);
					model.setPicturePath(selectList.get(i).getPicturePath());
					if(selectList.get(i).getPassTableId() != null) {
						model.setImg(PhotoUtil.sqlTophoto(selectList.get(i).getPassTableId()));
					}
					model.setSelect(selectList.get(i).getSelectA());
					model.setTypeQ("选择题");
					modelList.add(model);
				}																
				map.put("rows", modelList);
				map.put("total", pageInfo.getTotal());
			}
						
			else if(type.equals("4")) {//判断题
				PageHelper.startPage(offset, limit);
				if((category.equals("全部"))) {
					decideList = examService.getDecide(subject,level);
				}
				else {
					decideList = examService.getDecide1(subject,cate,level);
				}
				
				PageInfo<DecideStore> pageInfo  =new PageInfo<DecideStore>(decideList);
				for (int i = 0; i < decideList.size(); i++) {
					CommModel model = new CommModel();
					String id = decideList.get(i).getId();
					String questionName = decideList.get(i).getQuestionName();
					String questionCode = decideList.get(i).getQuestionCode();
					int typer = decideList.get(i).getType();
					String grade = decideList.get(i).getGrade();
					model.setId(id);
					model.setQuestionName(questionName);
					model.setQuestionCode(questionCode);
					model.setType(typer);
					model.setGrade(grade);
					model.setPicturePath(decideList.get(i).getPicturePath());
					if(decideList.get(i).getPassTableId() != null) {
						model.setImg(PhotoUtil.sqlTophoto(decideList.get(i).getPassTableId()));
					}
					model.setSelect(decideList.get(i).getSelectA());
					model.setTypeQ("判断题");
					modelList.add(model);
				}
				map.put("rows", modelList);
				map.put("total", pageInfo.getTotal());
			}
			else {
				if((category.equals("全部"))) {
					handList = examService.getHandList(subject,level);
				}
				else {
					handList = examService.getHandList1(subject,cate,level);
				}
				for (int i = 0; i < handList.size(); i++) {
					String id  = handList.get(i).getId();
					String questionName = handList.get(i).getQuestionName();
					String questionCode = handList.get(i).getQuestionCode();
					int typer = handList.get(i).getType();
					String grade = handList.get(i).getGrade();
					CommModel model = new CommModel();
					model.setId(id);
					model.setGrade(grade);
					model.setQuestionName(questionName);
					model.setQuestionCode(questionCode);
					model.setType(typer);
					model.setTypeQ("操作题");
					modelList.add(model);
				}
				if((category.equals("全部"))) {
					if((subject.equals("1"))) {
						newExamList = examService.getHF(subject,level);//联合查询通信题和填空题
					}
					else {
						newExamList = examService.getFill(subject,level);//查询填空题
					}
				}
				else {
					
						newExamList = examService.getHF1(subject,cate, level);//查询填空题					
					
				}
				
				for (int i = 0; i < newExamList.size(); i++) {
					
					CommModel model = new CommModel();
					String id = newExamList.get(i).getId();
					String questionName = newExamList.get(i).getQuestionName();
					String questionCode = newExamList.get(i).getQuestionCode();
					int typer = newExamList.get(i).getType();
					String grade = newExamList.get(i).getGrade();
					model.setId(id);
					model.setGrade(grade);
					model.setQuestionName(questionName);
					model.setQuestionCode(questionCode);
					model.setType(typer);
					model.setGrade(grade);
					model.setPicturePath(newExamList.get(i).getPicturePath());
					if(newExamList.get(i).getPassTableId() != null) {
						model.setImg(PhotoUtil.sqlTophoto(newExamList.get(i).getPassTableId()));
					}
					String typeQ = newExamList.get(i).getTypeQ();
					if(typeQ.equals("comm")) {
						model.setTypeQ("通信题");
					}else {
						model.setTypeQ("填空题");
					}
					modelList.add(model);
				}
				if((category.equals("全部"))) {
					selectList = examService.getSelect(subject, level);
				}
				else {
					selectList = examService.getSelect1(subject,cate, level);
				}
				
				for (int i = 0; i < selectList.size(); i++) {
					
					CommModel model = new CommModel();
					String id = selectList.get(i).getId();
					String questionName = selectList.get(i).getQuestionName();
					String questionCode = selectList.get(i).getQuestionCode();
					int typer = selectList.get(i).getType();
					String grade = selectList.get(i).getGrade();
					model.setId(id);
					model.setGrade(grade);
					model.setQuestionName(questionName);
					model.setQuestionCode(questionCode);
					model.setType(typer);
					model.setGrade(grade);
					model.setPicturePath(selectList.get(i).getPicturePath());
					if(selectList.get(i).getPassTableId() != null) {
						model.setImg(PhotoUtil.sqlTophoto(selectList.get(i).getPassTableId()));
					}
					model.setSelect(selectList.get(i).getSelectA());
					model.setTypeQ("选择题");
					modelList.add(model);
				}	
				if((category.equals("全部"))) {
					decideList = examService.getDecide(subject,level);
				}
				else {
					decideList = examService.getDecide1(subject,cate,level);
				}
				
				for (int i = 0; i < decideList.size(); i++) {
					CommModel model = new CommModel();
					String id = decideList.get(i).getId();
					String questionName = decideList.get(i).getQuestionName();
					String questionCode = decideList.get(i).getQuestionCode();
					int typer = decideList.get(i).getType();
					String grade = decideList.get(i).getGrade();
					model.setId(id);
					model.setQuestionName(questionName);
					model.setQuestionCode(questionCode);
					model.setType(typer);
					model.setGrade(grade);
					model.setPicturePath(decideList.get(i).getPicturePath());
					if(decideList.get(i).getPassTableId() != null) {
						model.setImg(PhotoUtil.sqlTophoto(decideList.get(i).getPassTableId()));
					}
					model.setSelect(decideList.get(i).getSelectA());
					model.setTypeQ("判断题");
					modelList.add(model);
				}
				List<CommModel> modelList1 = new ArrayList<CommModel>();
				modelList1 = PageUtil.startPage(modelList, limit, offset);
				map.put("rows", modelList1);
				map.put("total", modelList.size());
				
			}
			
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			map.put("rows", null);
			map.put("total",0);
		}
		return map;
		
	}
	
	
	/**
	 * 获取班级及班级下所属学生
	 * @return
	 */
	@RequestMapping(value = "/getclassandstu" ,method = RequestMethod.POST)
	@ResponseBody
	public List<TreeClassModel> getClassAndStu(String level){
		
		List<TreeClass> treeList = new ArrayList<TreeClass>();
		List<ClassDic> nameList = new ArrayList<ClassDic>();
		List<TreeClassModel> modelList1 = new ArrayList<TreeClassModel>();
		
		String className = null;//班级名
		String stuClass = null;// 学生所属班级
		String classId  = null;//班级ID
			
		try {
			nameList = classDicService.getNameList();
			treeList = examService.getTreeList(level);
			TreeClassModel t1= new TreeClassModel();
			for (int i = 0; i < nameList.size(); i++) {
					List<TreeClassModel> modelList3 = new ArrayList<TreeClassModel>();
					t1= new TreeClassModel();
					className = nameList.get(i).getClassName();
					classId  = nameList.get(i).getClassId();					
					for (int j = 0; j < treeList.size(); j++) {
							TreeClassModel t2 = new TreeClassModel();
							stuClass = treeList.get(j).getClassName();
							String [] model = null;
							if (className.equals(stuClass)) {
								String  idNum = treeList.get(j).getIdNumber();
								String  name = treeList.get(j).getName();
								t2.setChildren(new ArrayList<Object>());
								t2.setExpanded("false");
								t2.setId(idNum);
								t2.setType("2");
								t2.setTitle(name);
								t2.setName(name);
								modelList3.add(t2);
							} 															
					}
															
					t1.setChildren(modelList3);
					t1.setExpanded("false");
					t1.setId(classId); 
					t1.setType("1");
					t1.setTitle(className);
					t1.setName(className);
					modelList1.add(t1);	
					
			}			
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			TreeClassModel t1= new TreeClassModel();
			t1.setChildren(modelList1);
			t1.setExpanded("false");
			t1.setId(classId); 
			t1.setType("1");
			t1.setTitle(className);
			t1.setName(className);
			modelList1.add(t1);
		}
		
		return modelList1;
		
	}

	
	
}
